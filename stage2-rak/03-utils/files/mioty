#!/bin/bash

# -----------------------------------------------------------------------------
# CONFIGURATION
# -----------------------------------------------------------------------------

CONNECTION_NAME=mioty
MIROMICO_EDGECARD_MAC=E4:15:F6
NMCLI_CONNECTION_CMD="nmcli --terse c"
SSH_HOST="root@172.30.1.2"
SSH_CMD="ssh -o ConnectTimeout=10 -o HostKeyAlgorithms=+ssh-rsa ${SSH_HOST}"
SCP_CMD="scp -o ConnectTimeout=10 -o HostKeyAlgorithms=+ssh-rsa"

COLOR_INFO="\e[32m" # green
COLOR_ERROR="\e[33m" # yellow
COLOR_END="\e[0m"

# -----------------------------------------------------------------------------
# Utils
# -----------------------------------------------------------------------------

# Shows options
usage() {
    echo -e "${COLOR_INFO}Host configuration:${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}  $0 install              --> setups connection and firewall rules${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 uninstall            --> deletes connection${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 up                   --> brings up connection to edge card${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 down                 --> brings down connection to edge card${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}Edge card configuration:${COLOR_END}"
    echo
    echo -e "${COLOR_INFO}  $0 start                --> starts packet forwarder${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 stop                 --> stops packet forwarder${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 restart              --> restarts packet forwarder${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 enable               --> enables packet forwarder on boot by default${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 disable              --> disables packet forwarder on boot by default${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 getall               --> gets params from builtin packer forwarder${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 set <param> <value>  --> sets a param of the builtin packer forwarder${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 cert <file>          --> pushes a certificate file to card${COLOR_END}"
    echo -e "${COLOR_INFO}  $0 reset                --> resets packet forwarder params to factory values${COLOR_END}"
}

# Check requirement
requires() {
    COMMAND=$1
    if ! command -v ${COMMAND} &> /dev/null; then
        echo -e "${COLOR_ERROR}This script requires ${COMMAND} to work${COLOR_END}\n"
        exit 1
    fi
}

# Checks if the connection from host to edge card exists (even if down)
check_connection_exists() {
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} show | grep -c ${CONNECTION_NAME} )
    if [ ${CONNECTION_EXISTS} -ne 1 ]; then
        echo -e "${COLOR_ERROR}ERROR: run 'install' first to configure the connection${COLOR_END}"
        echo
        usage
        echo
        exit 2
    fi
}

# Checks if the connection from host to edge card is up
check_connection_up() {
    check_connection_exists
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} show --active | grep -c ${CONNECTION_NAME} )
    if [ ${CONNECTION_EXISTS} -ne 1 ]; then
        echo -e "${COLOR_ERROR}ERROR: run 'up' first to bring up the connection${COLOR_END}"
        echo
        usage
        echo
        exit 2
    fi
}

# Remounts root partition as read-write in card
mount_rw() {
    check_connection_up
    ${SSH_CMD} "mount -o rw,remount /"
}

# Sets card time to host time in UTC
settime() {
    check_connection_up
    DATETIME=$( date --utc  +"%Y/%m/%d %H:%M:%S" )
    ${SSH_CMD} "timedatectl set-timezone UTC ; timedatectl set-time '${DATETIME}'"
}

#Gets unique base staion ID based on edge card MAC interface
base_station_id() {
    MAC=$( ip -o link | grep ether | awk '{ print $2"|"$17 }' | grep -i "${MIROMICO_EDGECARD_MAC}" | tail -1 | cut -d'|' -f2 )
    if [[ "${MAC}" != "" ]]; then
        echo "${MAC}" | awk -F: '{print $1"-"$2"-"$3"-FF-FE-"$4"-"$5"-"$6}' | tr 'a-z' 'A-Z'
    fi
}

# -----------------------------------------------------------------------------
# Host - Edge Card connection
# -----------------------------------------------------------------------------

install_connection() {

    # Identify interface by MAC
    INTERNAL_IF=$( ip -o link | grep ether | awk '{ print $2 $17 }' | grep -i "${MIROMICO_EDGECARD_MAC}" | tail -1 | cut -d ":" -f1 )

    # Identify interface by traffic
    EXTERNAL_IF=$( tail -n+3 < /proc/net/dev | sort -k2 -nr | head -n1 | cut -d ":" -f1 | sed 's/ //g' )

    # Check if there is a miromico connection
    CONNECTION_EXISTS=$( ${NMCLI_CONNECTION_CMD} | grep -c ${CONNECTION_NAME} )

    if [[ $CONNECTION_EXISTS -eq 0 ]]; then
    sudo ${NMCLI_CONNECTION_CMD} add con-name ${CONNECTION_NAME} type ethernet
    fi

    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ifname "${INTERNAL_IF}"
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect yes
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.addresses 172.30.1.1/24
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.gateway 172.30.1.1
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.dns 1.1.1.1
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv4.method manual
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} ipv6.method ignore

    cat <<EOF > /tmp/99-${CONNECTION_NAME}
#!/bin/sh -e

INTERFACE=\$1
EVENT=\$2

if [ "\$INTERFACE" = "$INTERNAL_IF" ]
then

ip route del default via 172.30.1.1
echo 1 > /proc/sys/net/ipv4/ip_forward
iptables -I DOCKER-USER -j ACCEPT -m comment --comment "${CONNECTION_NAME}" 
iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to-destination 1.1.1.1:53 -m comment --comment "${CONNECTION_NAME}"  
iptables -t nat -A POSTROUTING -o $EXTERNAL_IF -j MASQUERADE -m comment --comment "${CONNECTION_NAME}" 
#iptables -A FORWARD -i $INTERNAL_IF -j ACCEPT

fi

exit 0

EOF

    sudo chown root:root /tmp/99-${CONNECTION_NAME}
    sudo chmod 755 /tmp/99-${CONNECTION_NAME}
    sudo mv /tmp/99-${CONNECTION_NAME} /etc/NetworkManager/dispatcher.d/

    sudo ${NMCLI_CONNECTION_CMD} reload

}

uninstall_connection() {
    sudo ${NMCLI_CONNECTION_CMD} del ${CONNECTION_NAME}
    sudo rm -rf /etc/NetworkManager/dispatcher.d/99-${CONNECTION_NAME}
}

start_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} up ${CONNECTION_NAME}
}

stop_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} down ${CONNECTION_NAME}
}

enable_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect yes
}

disable_connection() {
    check_connection_exists
    sudo ${NMCLI_CONNECTION_CMD} modify ${CONNECTION_NAME} connection.autoconnect no
}

# -----------------------------------------------------------------------------
# Packet forwarder management
# -----------------------------------------------------------------------------

start_pf() {
    check_connection_up
    ${SSH_CMD} "systemctl start mioty_bs"
}

stop_pf() {
    check_connection_up
    ${SSH_CMD} "systemctl stop mioty_bs"
}

enable_pf() {
    check_connection_up
    ${SSH_CMD} "systemctl enable mioty_bs"
}

disable_pf() {
    check_connection_up
    ${SSH_CMD} "systemctl disable mioty_bs"
}

getallparams() {

    check_connection_up
    
    rm -rf /tmp/mioty_bs_config.xml
    scp -q -o ConnectTimeout=2 -o HostKeyAlgorithms=+ssh-rsa  root@172.30.1.2:mioty_bs/mioty_bs_config.xml /tmp/mioty_bs_config.xml 
    RESPONSE=$?
    if [[ $RESPONSE -ne 0 ]]; then
        echo -e "${COLOR_ERROR}ERROR: connection error, please check the connection is started${COLOR_END}\n"
        exit 2
    fi

    UNIQUE_BASE_STATION_ID=$( cat /tmp/mioty_bs_config.xml | grep uniqueBaseStationId | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_NAME=$( cat /tmp/mioty_bs_config.xml | grep baseStationName | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_VENDOR=$( cat /tmp/mioty_bs_config.xml | grep baseStationVendor | cut -d'>' -f2 | cut -d'<' -f1 )
    BASE_STATION_MODEL=$( cat /tmp/mioty_bs_config.xml | grep baseStationModel | cut -d'>' -f2 | cut -d'<' -f1 )
    SERVICE_CENTER_ADDR=$( cat /tmp/mioty_bs_config.xml | grep serviceCenterAddr | cut -d'>' -f2 | cut -d'<' -f1 )
    SERVICE_CENTER_PORT=$( cat /tmp/mioty_bs_config.xml | grep serviceCenterPort | cut -d'>' -f2 | cut -d'<' -f1 )
    PROFILE=$( cat /tmp/mioty_bs_config.xml | grep profile | cut -d'>' -f2 | cut -d'<' -f1 )
    TLS_AUTH_REQUIRED=$( cat /tmp/mioty_bs_config.xml | grep tlsAuthRequired | cut -d'>' -f2 | cut -d'<' -f1 )

    echo -e "${COLOR_INFO}uniqueBaseStationId : ${UNIQUE_BASE_STATION_ID}"
    echo -e "${COLOR_INFO}baseStationName     : ${BASE_STATION_NAME}"
    echo -e "${COLOR_INFO}baseStationVendor   : ${BASE_STATION_VENDOR}"
    echo -e "${COLOR_INFO}baseStationModel    : ${BASE_STATION_MODEL}"
    echo -e "${COLOR_INFO}serviceCenterAddr   : ${SERVICE_CENTER_ADDR}"
    echo -e "${COLOR_INFO}serviceCenterPort   : ${SERVICE_CENTER_PORT}"
    echo -e "${COLOR_INFO}tlsAuthRequired     : ${TLS_AUTH_REQUIRED}"
    echo -e "${COLOR_INFO}profile             : ${PROFILE}"

    rm -rf /tmp/mioty_bs_config.xml 

}

setparam() {

    PARAM=$1
    VALUE=$2

    # Check valid params
    VALID_PARAMS=" uniqueBaseStationId baseStationName baseStationVendor baseStationModel serviceCenterAddr serviceCenterPort tlsAuthRequired profile "
    VALID_PARAM=$( echo "${VALID_PARAMS}" | grep -w -c  " ${PARAM} " )
    if [[ $VALID_PARAM -ne 1 ]]; then
        echo -e "${COLOR_ERROR}ERROR: valid parameters are$VALID_PARAMS${COLOR_END}\n"
        exit 2
    fi

    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # Backup copy
    ${SSH_CMD} "cd mioty_bs ; [ ! -f mioty_bs_config.xml.backup ] && cp mioty_bs_config.xml mioty_bs_config.xml.backup"

    # Change value
    ${SSH_CMD} "sed 's|\s*<parameter name=\"${PARAM}\">.*|    <parameter name=\"${PARAM}\">${VALUE}</parameter>|' -i mioty_bs/mioty_bs_config.xml"
    
}

resetparams() {
    
    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # recover backup
    ${SSH_CMD} "cd mioty_bs ; [ -f mioty_bs_config.xml.backup ] && cp mioty_bs_config.xml.backup mioty_bs_config.xml"
    ${SSH_CMD} "cd mioty_bs/tls_certificates ; [ -f bstation.cer.backup ] && cp bstation.cer.backup bstation.cer"
    ${SSH_CMD} "cd mioty_bs/tls_certificates ; [ -f bstation.key.backup ] && cp bstation.key.backup bstation.key"
    ${SSH_CMD} "cd mioty_bs/tls_certificates ; [ -f root_ca.cer.backup ] && cp root_ca.cer.backup root_ca.cer"

}

pushcert() {

    # Get file
    FILE=$1

    # Exists?
    if [[ ! -f $FILE ]]; then
        echo -e "${COLOR_ERROR}ERROR: file $FILE does not exist${COLOR_END}\n"
        exit 2
    fi

    # has valid name
    FILENAME=$( basename "${FILE}" )
    VALID_FILENAMES=" bstation.cer  bstation.key  root_ca.cer "
    VALID_FILENAME=$( echo "${VALID_FILENAMES}" | grep -w -c  " ${FILENAME} " )
    if [[ $VALID_FILENAME -ne 1 ]]; then
        echo -e "${COLOR_ERROR}ERROR: valid filenames are$VALID_FILENAMES${COLOR_END}\n"
        exit 2
    fi

    # Check connection
    check_connection_up
    
    # Mount as read-write
    mount_rw

    # Backup copy
    ${SSH_CMD} "cd mioty_bs/tls_certificates ; [ ! -f ${FILENAME}.backup ] && cp ${FILENAME} ${FILENAME}.backup"

    # Push file
    ${SCP_CMD} "${FILE}" ${SSH_HOST}:mioty_bs/tls_certificates/

}

# -----------------------------------------------------------------------------
# Entry point
# -----------------------------------------------------------------------------

echo

# Check requirements
requires nmcli
requires ssh
requires scp

if [[ $# -eq 0 ]]; then
    usage
    echo
    exit 1
fi

ACTION=$1
case "${ACTION}" in

    "install")
        echo -e "${COLOR_INFO}Installing connection and firewall rules${COLOR_END}\n"
        install_connection
        start_connection
        ;;

    "uninstall")
        echo -e "${COLOR_INFO}Uninstalling connection${COLOR_END}\n"
        stop_connection
        uninstall_connection
        ;;

    "up")
        echo -e "${COLOR_INFO}Brings up connection to edge card${COLOR_END}\n"
        start_connection
        ;;

    "down")
        echo -e "${COLOR_INFO}Brings down connection to edge card${COLOR_END}\n"
        stop_connection
        ;;

    "start")
        echo -e "${COLOR_INFO}Starting packet forwarder${COLOR_END}\n"
        start_pf
        ;;

    "stop")
        echo -e "${COLOR_INFO}Stopping packet forwarder${COLOR_END}\n"
        stop_pf
        ;;

    "restart")
        echo -e "${COLOR_INFO}Restarting packet forwarder${COLOR_END}\n"
        stop_pf
        start_pf
        ;;

    "enable")
        echo -e "${COLOR_INFO}Enabling packet forwarder on boot${COLOR_END}\n"
        enable_pf
        ;;

    "disable")
        echo -e "${COLOR_INFO}Disabling packet forwarder on boot${COLOR_END}\n"
        disable_pf
        ;;

    "getall") 
        echo -e "${COLOR_INFO}Packet forwarder parameters${COLOR_END}\n"
        getallparams
        ;;

    "set")
        if [[ $# -ne 3 ]]; then
            echo -e "${COLOR_ERROR}ERROR: Param name and value are required${COLOR_END}\n"
            usage
        else 
            setparam $2 $3
        fi
        ;;
    
    "cert")
        if [[ $# -ne 2 ]]; then
            echo -e "${COLOR_ERROR}ERROR: Certificate file requires${COLOR_END}\n"
            usage
        else 
            pushcert $2
        fi
        ;;

    "reset")
        echo -e "${COLOR_INFO}Factory reset packet forwarder parameters${COLOR_END}\n"
        resetparams
        ;;

    *)
        usage

esac

echo